"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var data_stream_1 = require("./data-stream");
var convert_1 = require("./convert");
var Outbound = (function () {
    function Outbound(lu3270) {
        this.lu3270 = lu3270;
    }
    Outbound.prototype.process = function (data) {
        console.log('Host ==> 3270', data);
        var command = data[0];
        var wcc;
        switch (command) {
            case data_stream_1.Command.WSF:
                wcc = new data_stream_1.WCC();
                this.processStructuredFields(data.slice(1));
                break;
            default:
                wcc = data_stream_1.WCC.fromByte(data[1]);
                this.processOrdersAndData(data.slice(2));
                break;
        }
        return wcc;
    };
    Outbound.prototype.processOrdersAndData = function (data) {
        var offset = 0;
        while (offset < data.length) {
            var order = data[offset++];
            switch (order) {
                case data_stream_1.Order.SF:
                    var attributes = data_stream_1.Attributes.fromByte(data[offset++]);
                    while (data[offset] && data[offset] >= 0x40) {
                        var value = convert_1.e2a(new Uint8Array([data[offset++]]));
                        this.lu3270.buffer[this.lu3270.address++] = new data_stream_1.Cell(value, attributes);
                    }
                    break;
                case data_stream_1.Order.SFE:
                    console.log('SFE oh oh!');
                    break;
                case data_stream_1.Order.SBA:
                    this.lu3270.address = data_stream_1.addressFromBytes(new Uint8Array([data[offset++], data[offset++]]));
                    break;
                case data_stream_1.Order.SA:
                    console.log('SA oh oh!');
                    break;
                case data_stream_1.Order.MF:
                    console.log('MF oh oh!');
                    break;
                case data_stream_1.Order.IC:
                    this.lu3270.cursor = this.lu3270.address;
                    break;
                case data_stream_1.Order.PT:
                    console.log('PT oh oh!');
                    break;
                case data_stream_1.Order.RA:
                    console.log('RA oh oh!');
                    break;
                case data_stream_1.Order.EUA:
                    console.log('EUA oh oh!');
                    break;
            }
        }
    };
    Outbound.prototype.processStructuredFields = function (data) {
        data.keys();
    };
    return Outbound;
}());
exports.Outbound = Outbound;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0Ym91bmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvb3V0Ym91bmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBd0Y7QUFHeEYscUNBQWdDO0FBU2hDO0lBR0Usa0JBQW1CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQUksQ0FBQztJQUd0QywwQkFBTyxHQUFQLFVBQVEsSUFBWTtRQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsSUFBSSxHQUFHLENBQUM7UUFDUixNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLEtBQUsscUJBQU8sQ0FBQyxHQUFHO2dCQUNkLEdBQUcsR0FBRyxJQUFJLGlCQUFHLEVBQUUsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDNUMsS0FBSyxDQUFDO1lBQ1I7Z0JBQ0UsR0FBRyxHQUFHLGlCQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6QyxLQUFLLENBQUM7UUFDVixDQUFDO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFJTyx1Q0FBb0IsR0FBNUIsVUFBNkIsSUFBWTtRQUN2QyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDZixPQUFPLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDNUIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDZCxLQUFLLG1CQUFLLENBQUMsRUFBRTtvQkFDWCxJQUFNLFVBQVUsR0FBRyx3QkFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUN2RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7d0JBQzVDLElBQU0sS0FBSyxHQUFHLGFBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNwRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsSUFBSSxrQkFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztvQkFDMUUsQ0FBQztvQkFDRCxLQUFLLENBQUM7Z0JBQ1IsS0FBSyxtQkFBSyxDQUFDLEdBQUc7b0JBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztvQkFDMUIsS0FBSyxDQUFDO2dCQUNSLEtBQUssbUJBQUssQ0FBQyxHQUFHO29CQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLDhCQUFnQixDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pGLEtBQUssQ0FBQztnQkFDUixLQUFLLG1CQUFLLENBQUMsRUFBRTtvQkFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUN6QixLQUFLLENBQUM7Z0JBQ1IsS0FBSyxtQkFBSyxDQUFDLEVBQUU7b0JBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDekIsS0FBSyxDQUFDO2dCQUNSLEtBQUssbUJBQUssQ0FBQyxFQUFFO29CQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO29CQUN6QyxLQUFLLENBQUM7Z0JBQ1IsS0FBSyxtQkFBSyxDQUFDLEVBQUU7b0JBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDekIsS0FBSyxDQUFDO2dCQUNSLEtBQUssbUJBQUssQ0FBQyxFQUFFO29CQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQ3pCLEtBQUssQ0FBQztnQkFDUixLQUFLLG1CQUFLLENBQUMsR0FBRztvQkFDWixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUMxQixLQUFLLENBQUM7WUFDVixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFTywwQ0FBdUIsR0FBL0IsVUFBZ0MsSUFBWTtRQUMxQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUgsZUFBQztBQUFELENBQUMsQUFyRUQsSUFxRUM7QUFyRVksNEJBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdHRyaWJ1dGVzLCBDZWxsLCBDb21tYW5kLCBPcmRlciwgV0NDLCBhZGRyZXNzRnJvbUJ5dGVzIH0gZnJvbSAnLi9kYXRhLXN0cmVhbSc7XG5cbmltcG9ydCB7IExVMzI3MCB9IGZyb20gJy4vbHUzMjcwJztcbmltcG9ydCB7IGUyYSB9IGZyb20gJy4vY29udmVydCc7XG5cbi8qKlxuICogTW9kZWwgdGhlIG91dGJvdW5kIGRhdGEgc3RyZWFtIGllOiBmcm9tIHRoZSBob3N0IHRvIHRoZSAzMjcwXG4gKlxuICogQHNlZSBodHRwOi8vcHVibGliei5ib3VsZGVyLmlibS5jb20vY2dpLWJpbi9ib29rbWdyX09TMzkwL1xuICogICAgICAgIEJPT0tTL0NON1A0MDAwL0NDT05URU5UUz9EVD0xOTkyMDYyNjExMjAwNFxuICovXG5cbmV4cG9ydCBjbGFzcyBPdXRib3VuZCB7XG5cbiAgLyoqIGN0b3IgKi9cbiAgY29uc3RydWN0b3IocHVibGljIGx1MzI3MDogTFUzMjcwKSB7IH1cblxuICAvKiogSGFuZGxlIHRoZSByYXcgYnVmZmVyICovXG4gIHByb2Nlc3MoZGF0YTogQnVmZmVyKTogV0NDIHtcbiAgICBjb25zb2xlLmxvZygnSG9zdCA9PT4gMzI3MCcsIGRhdGEpO1xuICAgIGNvbnN0IGNvbW1hbmQgPSBkYXRhWzBdO1xuICAgIGxldCB3Y2M7XG4gICAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgICBjYXNlIENvbW1hbmQuV1NGOlxuICAgICAgICB3Y2MgPSBuZXcgV0NDKCk7XG4gICAgICAgIHRoaXMucHJvY2Vzc1N0cnVjdHVyZWRGaWVsZHMoZGF0YS5zbGljZSgxKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgd2NjID0gV0NDLmZyb21CeXRlKGRhdGFbMV0pO1xuICAgICAgICB0aGlzLnByb2Nlc3NPcmRlcnNBbmREYXRhKGRhdGEuc2xpY2UoMikpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHdjYztcbiAgfVxuXG4gIC8vIHByaXZhdGUgbWV0aG9kc1xuXG4gIHByaXZhdGUgcHJvY2Vzc09yZGVyc0FuZERhdGEoZGF0YTogQnVmZmVyKTogdm9pZCB7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgd2hpbGUgKG9mZnNldCA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICBjb25zdCBvcmRlciA9IGRhdGFbb2Zmc2V0KytdO1xuICAgICAgc3dpdGNoIChvcmRlcikge1xuICAgICAgICBjYXNlIE9yZGVyLlNGOlxuICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBBdHRyaWJ1dGVzLmZyb21CeXRlKGRhdGFbb2Zmc2V0KytdKTtcbiAgICAgICAgICB3aGlsZSAoZGF0YVtvZmZzZXRdICYmIGRhdGFbb2Zmc2V0XSA+PSAweDQwKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGUyYShuZXcgVWludDhBcnJheShbZGF0YVtvZmZzZXQrK11dKSk7XG4gICAgICAgICAgICB0aGlzLmx1MzI3MC5idWZmZXJbdGhpcy5sdTMyNzAuYWRkcmVzcysrXSA9IG5ldyBDZWxsKHZhbHVlLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgT3JkZXIuU0ZFOlxuICAgICAgICAgIGNvbnNvbGUubG9nKCdTRkUgb2ggb2ghJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgT3JkZXIuU0JBOlxuICAgICAgICAgIHRoaXMubHUzMjcwLmFkZHJlc3MgPSBhZGRyZXNzRnJvbUJ5dGVzKG5ldyBVaW50OEFycmF5KFtkYXRhW29mZnNldCsrXSwgZGF0YVtvZmZzZXQrK11dKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgT3JkZXIuU0E6XG4gICAgICAgICAgY29uc29sZS5sb2coJ1NBIG9oIG9oIScpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE9yZGVyLk1GOlxuICAgICAgICAgIGNvbnNvbGUubG9nKCdNRiBvaCBvaCEnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBPcmRlci5JQzpcbiAgICAgICAgICB0aGlzLmx1MzI3MC5jdXJzb3IgPSB0aGlzLmx1MzI3MC5hZGRyZXNzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE9yZGVyLlBUOlxuICAgICAgICAgIGNvbnNvbGUubG9nKCdQVCBvaCBvaCEnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBPcmRlci5SQTpcbiAgICAgICAgICBjb25zb2xlLmxvZygnUkEgb2ggb2ghJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgT3JkZXIuRVVBOlxuICAgICAgICAgIGNvbnNvbGUubG9nKCdFVUEgb2ggb2ghJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwcm9jZXNzU3RydWN0dXJlZEZpZWxkcyhkYXRhOiBCdWZmZXIpOiB2b2lkIHtcbiAgICBkYXRhLmtleXMoKTtcbiAgfVxuXG59XG4iXX0=