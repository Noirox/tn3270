"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var net = require("net");
var data_stream_1 = require("./data-stream");
var Observable_1 = require("rxjs/Observable");
var chalk = require('chalk');
var Tn3270 = (function () {
    function Tn3270(host, port, model) {
        var _this = this;
        this.host = host;
        this.port = port;
        this.model = model;
        this.stream$ = Observable_1.Observable.create(function (observer) {
            _this.socket = new net.Socket();
            _this.socket.on('data', function (data) { return _this.dataHandler(data, observer); });
            _this.socket.on('error', function (error) {
                console.log(chalk.green('3270 -> HOST'), chalk.red(error.message));
                observer.error(error);
            });
            _this.socket.on('end', function () {
                console.log(chalk.green('3270 -> HOST'), chalk.cyan('Disconnected'));
                observer.complete();
            });
            _this.socket.setNoDelay(true);
            _this.socket.connect({ host: host, port: port }, function () {
                console.log(chalk.green('3270 -> HOST'), chalk.blue("Connected at " + host + ":" + port));
            });
            return function () { return _this.socket.end(); };
        });
    }
    Tn3270.prototype.write = function (bytes) {
        if (bytes instanceof Buffer)
            this.socket.write(bytes);
        else
            this.socket.write(Buffer.from(bytes));
    };
    Tn3270.prototype.dataHandler = function (data, observer) {
        if (data[0] === data_stream_1.Telnet.IAC) {
            var negotiator = new Negotiator(data);
            var response = void 0;
            if (negotiator.matches(['IAC', 'DO', 'TERMINAL_TYPE']))
                response = ['IAC', 'WILL', 'TERMINAL_TYPE'];
            if (negotiator.matches(['IAC', 'DO', 'EOR']))
                response = ['IAC', 'WILL', 'EOR', 'IAC', 'DO', 'EOR'];
            if (negotiator.matches(['IAC', 'DO', 'BINARY']))
                response = ['IAC', 'WILL', 'BINARY', 'IAC', 'DO', 'BINARY'];
            if (negotiator.matches(['IAC', 'SB', 'TERMINAL_TYPE']))
                response = ['IAC', 'SB', 'TERMINAL_TYPE', '0x00', this.model, 'IAC', 'SE'];
            if (response) {
                console.log(chalk.yellow('HOST -> 3270'), chalk.white(negotiator.decode()));
                console.log(chalk.green('3270 -> HOST'), chalk.gray(response));
                this.write(negotiator.encode(response));
            }
        }
        else
            observer.next(data);
    };
    return Tn3270;
}());
exports.Tn3270 = Tn3270;
var Negotiator = (function () {
    function Negotiator(data) {
        this.data = data;
    }
    Negotiator.prototype.decode = function () {
        var commands = [];
        for (var ix = 0; ix < this.data.length; ix++) {
            var byte = this.data[ix];
            var decoded = Negotiator.reverse[String(byte)];
            if (typeof (decoded) === 'undefined')
                decoded = "0x" + ((byte < 16) ? '0' : '') + byte.toString(16);
            commands.push(decoded);
        }
        return commands;
    };
    Negotiator.prototype.encode = function (commands) {
        return commands.reduce(function (acc, command) {
            var encoded = Negotiator.lookup[command];
            if (typeof (command) === 'number')
                acc.push(command);
            else if (command.startsWith('0x'))
                acc.push(parseInt(command.substring(3), 16));
            else if (typeof (encoded) === 'undefined') {
                for (var ix = 0; ix < command.length; ix++)
                    acc.push(command.charCodeAt(ix));
            }
            else
                acc.push(encoded);
            return acc;
        }, []);
    };
    Negotiator.prototype.matches = function (commands) {
        var _this = this;
        return commands.every(function (command, ix) {
            return Negotiator.lookup[command] === _this.data[ix];
        });
    };
    Negotiator.lookup = {
        'BINARY': data_stream_1.Telnet.BINARY,
        'DO': data_stream_1.Telnet.DO,
        'DONT': data_stream_1.Telnet.DONT,
        'EOR': data_stream_1.Telnet.EOR,
        'IAC': data_stream_1.Telnet.IAC,
        'SB': data_stream_1.Telnet.SB,
        'SE': data_stream_1.Telnet.SE,
        'TERMINAL_TYPE': data_stream_1.Telnet.TERMINAL_TYPE,
        'WILL': data_stream_1.Telnet.WILL,
        'WONT': data_stream_1.Telnet.WONT
    };
    Negotiator.reverse = data_stream_1.reverseMap(Negotiator.lookup);
    return Negotiator;
}());
//# sourceMappingURL=data:application/json;base64,